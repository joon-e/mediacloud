% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stories.R
\name{count_stories}
\alias{count_stories}
\alias{count_tags}
\title{Count stories and tags}
\usage{
count_stories(
  text = NULL,
  title = NULL,
  media_id = NULL,
  after_date = NULL,
  before_date = NULL,
  split = TRUE,
  split_period = "day",
  key = NULL,
  tibble = TRUE
)

count_tags(
  text = NULL,
  title = NULL,
  media_id = NULL,
  after_date = NULL,
  before_date = NULL,
  n = 1000,
  tag_sets_id = NULL,
  key = NULL,
  tibble = TRUE
)
}
\arguments{
\item{text}{Optional character vector for full text search passed to the
\href{https://mediacloud.org/support/query-guide/}{Solr query}.
If character vector contains more than one element, elements will
be connected with OR.}

\item{title}{Optional character vector for title search passed to the
\href{https://mediacloud.org/support/query-guide/}{Solr query}.
If character vector contains more than one element, elements will
be connected with OR.}

\item{media_id}{Optional media ids (see \code{\link{search_media}}) passed to the
\href{https://mediacloud.org/support/query-guide/}{Solr query}.
If vector contains more than one element, elements will
be connected with OR.}

\item{after_date}{Limit results to stories published after this date. Should
be a date string that can be interpreted as a \code{POSIXct} object, e.g.,
'2021-01-01' or '2021-12-24 09:00:00'. Note that '00:00:00' will be
added if only passing a date.}

\item{before_date}{Limit results to stories published before this date. Should
be a date string that can be interpreted as a \code{POSIXct} object, e.g.,
'2021-01-01' or '2021-12-24 09:00:00'. Note that '00:00:00' will be
added if only passing a date.}

\item{split}{logical, either or not to split the count by \code{split_period}, default to TRUE}

\item{split_period}{character, split the couny by this granularity, possible values are "day", "week", "month", and "year"}

\item{key}{MediaCloud API key. Will be read from environment
variable 'MEDIACLOUD_API_KEY' if set to \code{NULL} (default).}

\item{tibble}{Logical indicating whether result should be returned as
a tibble. Default to \code{TRUE}. If set to \code{FALSE}, the unedited content
of the HTTP response will be returned instead.}

\item{n}{numeric, maximum number of tags to return}

\item{tag_sets_id}{character, if not NULL, only tags belonging to this tag sets is returned. For example, the tag set id of "2389" is tag set of people as identified by the CLIFF named-entity annotator.}
}
\value{
depending on the parameter \code{tibble}, the return object can be a tibble (\code{tibble} is TRUE) or a list (\code{tibble} is FALSE).
}
\description{
Search for stories with various parameters. Multiple parameters
will be connected with AND in the call.
\code{count_stories} gets the total number of stories, possibly by date. \code{count_tags} gets the total number of stories by \href{https://mediacloud.org/support/list-of-tags}{tags}.
}
\examples{
\dontrun{
## search for daily count of articles mentioning "klimawandel" in German media
de_media <- search_media(tag = "Germany___National")
res_kw <- count_stories(text = "klimawandel", after_date = "2021-01-01",
before_date = "2021-12-22", media_id = de_media$media_id,
split = TRUE, split_period = "day")
## search for popular named entities in articles mentioning "covid" in German media
count_tags(text = "covid", media_id = de_media$media_id, n = 100,
after_date = "2020-01-01", tag_sets_id = "2389")
}
}
